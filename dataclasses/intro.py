from __future__ import annotations

from dataclasses import dataclass, field, astuple, asdict
from pprint import pprint

import inspect
import random
import string


def generate_id() -> str:
    return "".join(random.choices(string.ascii_letters, k=12))


# frozen => default: False, when True
# we make it immutabele
# generated methods: __hash__, __setattr__

# order => default: False, when True dc generates
# following methods: __ge__, __gt__, __le__, __lt__


@dataclass(frozen=True, order=True)
class Comment:
    id_: str = field(init=False, default_factory=generate_id)
    # id_ will get only values from generate_id

    # setting default value field(default="") also possible
    text: str = ""

    # setting deafutl value to non primitive data types
    replies: list[int] = field(
        default_factory=list, compare=False, hash=False, repr=False)

    # replies won't be used in while comparing objects,
    # hashing and representation


def main():
    comment = Comment("First comment")
    # comment.id_ = 3  # raises an error, because frozen is True

    print(comment)  # Comment(id_=1, text='First comment') (auto __repr__)
    # print(astuple(comment))  # (1, 'First comment')
    # print(asdict(comment))  # {'id_': 1, 'text': 'First comment'}

    # pprint(inspect.getmembers(Comment, inspect.isfunction))
    # viewing what functions generated by dataclasses


if __name__ == "__main__":
    main()
